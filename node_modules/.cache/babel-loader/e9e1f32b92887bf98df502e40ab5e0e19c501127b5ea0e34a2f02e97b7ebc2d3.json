{"ast":null,"code":"import Header_View from './components/Header_View.vue';\nimport Footer_View from './components/Footer_View.vue';\nexport default {\n  name: 'App',\n  components: {\n    Header_View,\n    Footer_View\n  },\n  data() {\n    return {\n      showAddTask: false\n    };\n  },\n  methods: {\n    async deleteTask(id) {\n      console.log('Delete Task', id);\n      if (confirm('You sure you want to Delete the Task')) {\n        const response = await fetch(`http://localhost:5000/tasks/${id}`, {\n          method: 'DELETE',\n          headers: {\n            'Content-type': 'application/json'\n          }\n        });\n        response.status === 200 ? this.tasks = this.tasks.filter(task => task.id !== id) : alert('Unable to delete');\n      }\n    },\n    async toggleReminder(id) {\n      console.log('Toggle Reminder', id);\n      const taskToToggle = await this.fetchTask(id);\n      //const updateTask = { ...taskToToggle, reminder: !taskToToggle.reminder }\n      taskToToggle.reminder = !taskToToggle.reminder;\n      console.log('Updated Task', JSON.stringify(taskToToggle));\n      const response = await fetch(`http://localhost:5000/tasks/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-type': 'application/json'\n        },\n        body: JSON.stringify(taskToToggle)\n      });\n      const data = await response.json();\n      this.tasks = this.tasks.map(task => task.id === id ? {\n        ...task,\n        reminder: data.reminder\n      } : task);\n      // response.status === 200 ?\n      //   (this.tasks = this.tasks.map((task) => task.id === id ? { ...task, reminder: data.reminder } : task))\n      //   : alert('Unable to update the task')\n    },\n\n    async addTask(task) {\n      const response = await fetch('http://localhost:5000/tasks', {\n        method: 'POST',\n        headers: {\n          'Content-type': 'application/json'\n        },\n        body: JSON.stringify(task)\n      });\n      const data = await response.json();\n      console.log('add task res', data);\n      this.tasks = [...this.tasks, task];\n    },\n    toggleAddTask() {\n      this.showAddTask = !this.showAddTask;\n    },\n    async fetchTasks() {\n      const response = await fetch('http://localhost:5000/tasks');\n      const data = await response.json();\n      return data;\n    },\n    async fetchTask(id) {\n      console.log('task', id);\n      const response = await fetch(`http://localhost:5000/tasks/${id}`);\n      const data = await response.json();\n      console.log('single task res', data);\n      return data;\n    }\n  },\n  async created() {\n    // this.tasks = [\n    //   {\n    //     id: 1,\n    //     text: 'Doctor Appointment',\n    //     day: 'March 1st at 10.00 AM',\n    //     reminder: true\n    //   },\n    //   {\n    //     id: 2,\n    //     text: 'Play Cricket',\n    //     day: 'March 1st at 05.00 PM',\n    //     reminder: false\n    //   },\n    //   {\n    //     id: 3,\n    //     text: 'Go to MacD',\n    //     day: 'March 1st at 09.00 PM',\n    //     reminder: true\n    //   }\n\n    // ]\n    this.tasks = await this.fetchTasks();\n  }\n};","map":{"version":3,"names":["Header_View","Footer_View","name","components","data","showAddTask","methods","deleteTask","id","console","log","confirm","response","fetch","method","headers","status","tasks","filter","task","alert","toggleReminder","taskToToggle","fetchTask","reminder","JSON","stringify","body","json","map","addTask","toggleAddTask","fetchTasks","created"],"sources":["/Users/viraj.jage/Desktop/learning/vue-crash-app/src/App.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <Header_View @toggle-add-task=\"toggleAddTask\" title=\"Task Tracker\" :showAddTask=showAddTask />\n  \n    <router-view/>\n    <Footer_View />\n  </div>\n</template>\n\n<script>\n\nimport Header_View from './components/Header_View.vue';\nimport Footer_View from './components/Footer_View.vue';\n\nexport default {\n  name: 'App',\n  components: {\n    Header_View,\n    Footer_View\n},\n  data() {\n    return {\n     \n      showAddTask: false\n    }\n  },\n  methods: {\n    async deleteTask(id) {\n      console.log('Delete Task', id)\n      if (confirm('You sure you want to Delete the Task')) {\n        const response = await fetch(`http://localhost:5000/tasks/${id}`, {\n          method: 'DELETE',\n          headers: {\n            'Content-type': 'application/json',\n          }\n        })\n        response.status === 200 ?\n          (this.tasks = this.tasks.filter((task) => task.id !== id))\n          : alert('Unable to delete')\n      }\n    },\n    async toggleReminder(id) {\n      console.log('Toggle Reminder', id)\n      const taskToToggle = await this.fetchTask(id)\n      //const updateTask = { ...taskToToggle, reminder: !taskToToggle.reminder }\n      taskToToggle.reminder = !taskToToggle.reminder\n\n      console.log('Updated Task',JSON.stringify(taskToToggle))\n\n      const response = await fetch(`http://localhost:5000/tasks/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-type': 'application/json',\n        },\n        body: JSON.stringify(taskToToggle)\n      })\n\n  \n    \n\n      const data = await response.json()\n\n      this.tasks = this.tasks.map((task) => task.id === id ? { ...task, reminder: data.reminder } : task)\n      // response.status === 200 ?\n      //   (this.tasks = this.tasks.map((task) => task.id === id ? { ...task, reminder: data.reminder } : task))\n      //   : alert('Unable to update the task')\n    },\n    async addTask(task) {\n      const response = await fetch('http://localhost:5000/tasks', {\n        method: 'POST',\n        headers: {\n          'Content-type': 'application/json',\n        },\n        body: JSON.stringify(task)\n      })\n      const data = await response.json()\n      console.log('add task res', data)\n\n      this.tasks = [...this.tasks, task]\n    },\n    toggleAddTask() {\n      this.showAddTask = !this.showAddTask\n    },\n    async fetchTasks() {\n      const response = await fetch('http://localhost:5000/tasks')\n      const data = await response.json()\n      return data\n    },\n    async fetchTask(id) {\n      console.log('task', id)\n      const response = await fetch(`http://localhost:5000/tasks/${id}`)\n      const data = await response.json()\n      console.log('single task res', data)\n      return data\n    }\n  },\n  async created() {\n    // this.tasks = [\n    //   {\n    //     id: 1,\n    //     text: 'Doctor Appointment',\n    //     day: 'March 1st at 10.00 AM',\n    //     reminder: true\n    //   },\n    //   {\n    //     id: 2,\n    //     text: 'Play Cricket',\n    //     day: 'March 1st at 05.00 PM',\n    //     reminder: false\n    //   },\n    //   {\n    //     id: 3,\n    //     text: 'Go to MacD',\n    //     day: 'March 1st at 09.00 PM',\n    //     reminder: true\n    //   }\n\n    // ]\n    this.tasks = await this.fetchTasks()\n  },\n\n}\n</script>\n\n<style>\n@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400&display=swap');\n\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  font-family: 'Poppins', sans-serif;\n}\n\n.container {\n  max-width: 500px;\n  margin: 30px auto;\n  overflow: auto;\n  min-height: 300px;\n  border: 1px solid steelblue;\n  padding: 30px;\n  border-radius: 5px;\n}\n\n.btn {\n  display: inline-block;\n  background: #000;\n  color: #fff;\n  border: none;\n  padding: 10px 20px;\n  margin: 5px;\n  border-radius: 5px;\n  cursor: pointer;\n  text-decoration: none;\n  font-size: 15px;\n  font-family: inherit;\n}\n\n.btn:focus {\n  outline: none;\n}\n\n.btn:active {\n  transform: scale(0.98);\n}\n\n.btn-block {\n  display: block;\n  width: 100%;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}